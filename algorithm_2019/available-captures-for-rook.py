"""
在一个 8 x 8 的棋盘上，有一个白色车（rook）。也可能有空方块，白色的象（bishop）和黑色的卒（pawn）。它们分别以字符 “R”，“.”，“B” 和 “p” 给出。大写字符表示白棋，小写字符表示黑棋。

车按国际象棋中的规则移动：它选择四个基本方向中的一个（北，东，西和南），然后朝那个方向移动，直到它选择停止、到达棋盘的边缘或移动到同一方格来捕获该方格上颜色相反的卒。另外，车不能与其他友方（白色）象进入同一个方格。

返回车能够在一次移动中捕获到的卒的数量。


示例 1：



输入：[[".",".",".",".",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".","R",".",".",".","p"],[".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".","."]]
输出：3
解释：
在本例中，车能够捕获所有的卒。
示例 2：



输入：[[".",".",".",".",".",".",".","."],[".","p","p","p","p","p",".","."],[".","p","p","B","p","p",".","."],[".","p","B","R","B","p",".","."],[".","p","p","B","p","p",".","."],[".","p","p","p","p","p",".","."],[".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".","."]]
输出：0
解释：
象阻止了车捕获任何卒。
示例 3：



输入：[[".",".",".",".",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".","p",".",".",".","."],["p","p",".","R",".","p","B","."],[".",".",".",".",".",".",".","."],[".",".",".","B",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".",".",".",".",".","."]]
输出：3
解释：
车可以捕获位置 b5，d6 和 f5 的卒。
"""


class Solution:
    def find_pawn(self, board, start, direction):
        """
        沿着某个方向寻找pawn，当找到B或者边界的时候返回False，否则返回True
        :param board:
        :param start:
        :param direction:
        :return:
        """
        i, j = start
        incr_i, incr_j = direction
        while 0 <= i < 8 and 0 <= j < 8:
            if board[i][j] == 'p':
                return True
            elif board[i][j] == 'B':
                break
            i, j = i + incr_i, j + incr_j
        return False

    def locate_R(self, board):
        # 定位R的位置
        for i_index, row in enumerate(board):
            for j_index, value in enumerate(row):
                if value == 'R':
                    return i_index, j_index
        return None

    def numRookCaptures(self, board) -> int:
        start = self.locate_R(board)
        if start is None:
            return 0
        count = 0
        if self.find_pawn(board, start, (0, 1)):
            count += 1
        if self.find_pawn(board, start, (0, -1)):
            count += 1
        if self.find_pawn(board, start, (1, 0)):
            count += 1
        if self.find_pawn(board, start, (-1, 0)):
            count += 1
        return count


if __name__ == '__main__':
    examples = [
        ([[".",".",".",".",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".","R",".",".",".","p"],[".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".","."]], 3),
        ([[".",".",".",".",".",".",".","."],[".","p","p","p","p","p",".","."],[".","p","p","B","p","p",".","."],[".","p","B","R","B","p",".","."],[".","p","p","B","p","p",".","."],[".","p","p","p","p","p",".","."],[".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".","."]], 0),
        ([[".",".",".",".",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".","p",".",".",".","."],["p","p",".","R",".","p","B","."],[".",".",".",".",".",".",".","."],[".",".",".","B",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".",".",".",".",".","."]], 3)
    ]
    for example in examples:
        res = Solution().numRookCaptures(example[0])
        assert res == example[1]

